<?xml version="1.0" encoding="UTF-8"?>
<Definition parser="v3">
    <Templates>
        <Template ID="SCHEMA_NAME">
            <![CDATA[DNAUTHORIZATION]]>
        </Template>
        <Template ID="SELECT_USER_ACCOUNT">
            <![CDATA[SELECT ACCOUNT_ID,
                           ACCOUNT_NAME,
                           ACCOUNT_MAIL,
                           ACCOUNT_PASSWORD_VERIFIER,
                           ACCOUNT_SALT,
                           ACCOUNT_LAST_PASSWORD_UPDATE,
                           ACCOUNT_PASSWORD_RESET_INTERVAL,
                           ACCOUNT_LOCK_COUNT,
                           ACCOUNT_LOCK_TIME,
                           ACCOUNT_IS_DEPRECATED,
                           ACCOUNT_IS_SYSTEM
                  FROM DNAUTHORIZATION.USERS_ACCOUNT]]>
        </Template>
        <Template ID="SELECT_USERS_INFO">
            <![CDATA[SELECT ACCOUNT_ID,
                           USER_SURNAME,
                           USER_NAME,
                           USER_PATRONYMIC,
                           USER_DATE_OF_BIRTH,
                           USER_PERSONAL_NUMBER,
                           USER_STRUCTURE,
                           USER_CURRENT_POST,
                           USER_PHONE,
                           USER_OFFICE
                    FROM DNAUTHORIZATION.USERS_INFO]]>
        </Template>
    </Templates>
    <QuerySet ID="GET_USER_ACCOUNT">
        <Parameters>
            <Parameter name="ACCOUNT_UUID" type="uuid">
                <When value="null"/>
                <Otherwise><![CDATA[AND ACCOUNT_ID = $ACCOUNT_UUID$]]></Otherwise>
            </Parameter>
            <Parameter name="ACCOUNT_NAME" type="string">
                <When value="null"/>
                <Otherwise><![CDATA[AND ACCOUNT_NAME = $ACCOUNT_NAME$]]></Otherwise>
            </Parameter>
            <Parameter name="ACCOUNT_MAIL" type="string">
                <When value="null"/>
                <Otherwise><![CDATA[AND ACCOUNT_MAIL = $ACCOUNT_MAIL$]]></Otherwise>
            </Parameter>
        </Parameters>
        <Query>
            <SQL name="main">
                <![CDATA[
                    $REF_SQL=SELECT_USER_ACCOUNT$
                    WHERE TRUE $ACCOUNT_UUID$ $ACCOUNT_NAME$ $ACCOUNT_MAIL$;
                ]]>
            </SQL>
        </Query>
    </QuerySet>
    <QuerySet ID="ADD_USER_ACCOUNT">
        <Parameters>
            <Parameter name="ACCOUNT_NAME" type="string"/>
            <Parameter name="ACCOUNT_MAIL" type="string"/>
            <Parameter name="ACCOUNT_PASSWORD_VERIFIER" type="string"/>
            <Parameter name="ACCOUNT_SALT" type="string"/>
        </Parameters>
        <Query>
            <SQL name="main">
                <![CDATA[
                    INSERT INTO $REF_SQL=SCHEMA_NAME$.USERS_ACCOUNT(ACCOUNT_NAME, ACCOUNT_MAIL, ACCOUNT_PASSWORD_VERIFIER, ACCOUNT_SALT)
                    VALUES ($ACCOUNT_NAME$, $ACCOUNT_MAIL$, $ACCOUNT_PASSWORD_VERIFIER$, $ACCOUNT_SALT$)
                    RETURNING *;
                ]]>
            </SQL>
        </Query>
    </QuerySet>
    <QuerySet ID="UPDATE_USER_ACCOUNT">
        <Parameters>
            <Parameter name="ACCOUNT_UUID" type="uuid"/>
            <Parameter name="ACCOUNT_NAME" type="string"/>
            <Parameter name="ACCOUNT_MAIL" type="string"/>
            <Parameter name="ACCOUNT_PASSWORD_VERIFIER" type="string"/>
            <Parameter name="ACCOUNT_SALT" type="string"/>
            <Parameter name="ACCOUNT_PASSWORD_RESET_INTERVAL" type="int"/>
        </Parameters>
        <Query>
            <SQL name="main">
                <![CDATA[
                    UPDATE $REF_SQL=SCHEMA_NAME$.USERS_ACCOUNT
                    SET ACCOUNT_NAME                    = $ACCOUNT_NAME$,
                        ACCOUNT_MAIL                    = $ACCOUNT_MAIL$,
                        ACCOUNT_PASSWORD_VERIFIER       = $ACCOUNT_PASSWORD_VERIFIER$,
                        ACCOUNT_SALT                    = $ACCOUNT_SALT$,
                        ACCOUNT_PASSWORD_RESET_INTERVAL = $ACCOUNT_PASSWORD_RESET_INTERVAL$
                    WHERE ACCOUNT_ID = $ACCOUNT_UUID$
                    RETURNING *;
                ]]>
            </SQL>
        </Query>
    </QuerySet>
    <QuerySet ID="GET_USER_INFO">
        <Parameters>
            <Parameter name="ACCOUNT_UUID" type="uuid">
                <When value="null"/>
                <Otherwise><![CDATA[WHERE ACCOUNT_ID = $ACCOUNT_UUID$]]></Otherwise>
            </Parameter>
        </Parameters>
        <Query>
            <SQL name="main">
                <![CDATA[
                    $REF_SQL=SELECT_USERS_INFO$
                    $ACCOUNT_UUID$
                ]]>
            </SQL>
        </Query>
    </QuerySet>
    <QuerySet ID="ADD_USERS_INFO">
        <Parameters>
            <Parameter name="ACCOUNT_UUID" type="uuid"/>
            <Parameter name="USER_SURNAME" type="string"/>
            <Parameter name="USER_NAME" type="string"/>
            <Parameter name="USER_PATRONYMIC" type="string"/>
            <Parameter name="USER_DATE_OF_BIRTH" type="date"/>
            <Parameter name="USER_PERSONAL_NUMBER" type="int"/>
            <Parameter name="USER_STRUCTURE" type="int"/>
            <Parameter name="USER_CURRENT_POST" type="uuid"/>
            <Parameter name="USER_PHONE" type="string"/>
            <Parameter name="USER_OFFICE" type="string"/>
        </Parameters>
        <Query>
            <SQL name="main">
                <![CDATA[
                    INSERT INTO $REF_SQL=SCHEMA_NAME$.USERS_INFO(ACCOUNT_ID, USER_SURNAME, USER_NAME, USER_PATRONYMIC, USER_DATE_OF_BIRTH, USER_PERSONAL_NUMBER, USER_STRUCTURE, USER_CURRENT_POST, USER_PHONE, USER_OFFICE)
                    VALUES ($ACCOUNT_UUID$, $USER_SURNAME$, $USER_NAME$, $USER_PATRONYMIC$, $USER_DATE_OF_BIRTH$, $USER_PERSONAL_NUMBER$, $USER_STRUCTURE$, $USER_CURRENT_POST$, $USER_PHONE$, $USER_OFFICE$)
                    RETURNING *;
                ]]>
            </SQL>
        </Query>
    </QuerySet>
    <QuerySet ID="UPDATE_USERS_INFO">
        <Parameters>
            <Parameter name="ACCOUNT_UUID" type="uuid"/>
            <Parameter name="USER_SURNAME" type="string"/>
            <Parameter name="USER_NAME" type="string"/>
            <Parameter name="USER_PATRONYMIC" type="string"/>
            <Parameter name="USER_DATE_OF_BIRTH" type="date"/>
            <Parameter name="USER_PERSONAL_NUMBER" type="int"/>
            <Parameter name="USER_STRUCTURE" type="int"/>
            <Parameter name="USER_CURRENT_POST" type="uuid"/>
            <Parameter name="USER_PHONE" type="string"/>
            <Parameter name="USER_OFFICE" type="string"/>
        </Parameters>
        <Query>
            <SQL name="main">
                <![CDATA[
                    UPDATE $REF_SQL=SCHEMA_NAME$.USERS_INFO
                    SET USER_SURNAME         = $USER_SURNAME$,
                        USER_NAME            = $USER_NAME$,
                        USER_PATRONYMIC      = $USER_PATRONYMIC$,
                        USER_DATE_OF_BIRTH   = $USER_DATE_OF_BIRTH$,
                        USER_PERSONAL_NUMBER = $USER_PERSONAL_NUMBER$,
                        USER_STRUCTURE       = $USER_STRUCTURE$,
                        USER_CURRENT_POST    = $USER_CURRENT_POST$,
                        USER_PHONE           = $USER_PHONE$,
                        USER_OFFICE          = $USER_OFFICE$
                    WHERE ACCOUNT_ID = $ACCOUNT_UUID$
                    RETURNING *;
                ]]>
            </SQL>
        </Query>
    </QuerySet>

    <QuerySet ID="CHECK_ACCOUNT_IS_BLOCK">
        <Parameters>
            <Parameter name="ACCOUNT_UUID" type="uuid"/>
            <Parameter name="ACCOUNT_IP" type="string"/>
        </Parameters>
        <Query>
            <SQL name="main">
                <![CDATA[
                    WITH USERS_ACCOUNT AS (SELECT *
                                           FROM DNAUTHORIZATION.USERS_ACCOUNT AS USERS_ACCOUNT
                                           WHERE ACCOUNT_ID = $ACCOUNT_UUID$),
                         LOG_LIST AS (SELECT ACCOUNT_ID, APP_ID, LOG_TIME, LOG_IP, LOG_SIGNATURE, LOG_SUCCESS
                                      FROM DNAUTHORIZATION.AUTHORIZATION_LOG_ATTEMPT AS LOG
                                      WHERE ACCOUNT_ID = $ACCOUNT_UUID$
                                        AND LOG_TIME BETWEEN CURRENT_TIMESTAMP - ((SELECT USERS_ACCOUNT.ACCOUNT_LOCK_TIME
                                                                               FROM USERS_ACCOUNT) ||
                                                                              ' MINUTES')::INTERVAL
                                          AND CURRENT_TIMESTAMP
                                        AND LOG_SUCCESS = FALSE
                                        AND LOG_IP = $ACCOUNT_IP$)
                    SELECT COALESCE(USERS_ACCOUNT.ACCOUNT_LOCK_TIME - (EXTRACT(EPOCH FROM CURRENT_TIMESTAMP - (SELECT MIN(LOG_LIST.LOG_TIME) FROM LOG_LIST)) / 60)::INT, 0)                                                        AS TIME_TO_UNLOCK,
                           (SELECT COUNT(*) FROM LOG_LIST) > USERS_ACCOUNT.ACCOUNT_LOCK_COUNT AS IS_BLOCK
                    FROM USERS_ACCOUNT;
                ]]>
            </SQL>
        </Query>
    </QuerySet>
</Definition>